openapi: '3.0.2'

info:
  title: Game Start API
  version: v1
  description: |
    ### API para nuestro proyecto final de curso Api Evangelist, de la fundación APIAddicts
  license:
    name: Open Software License 3.0
    url: https://opensource.org/licenses/OSL-3.0
  contact:
    name: Jacob de las Peñas | Marcos Carretero Poblete
    email: jacob@cloudappi.net

servers:
  - url: https://api.server.com

# security:
#   - wso2_ldap:
#     description: User authorization using LDAP
#     type: 'oauth2'
#     tokenUrl: https://example.com/oauth/token
#     flow: 'password'
#   - wso2_365:
#     description: User authorization using Office 365
#     type: 'oauth2'
#     flow: accessCode
#     authorizationUrl: https://example.com/oauth/authorize
#     tokenUrl: https://example.com/oauth/token

paths:
  /consoles:
    get:
      tags:
        - Consoles

    post:
      tags:
        - Consoles

  /consoles/{consoleId}:
    parameters:
      - $ref: '#/components/parameters/uuidParam'
    get:
      tags:
        - Consoles

    patch:
      tags:
        - Consoles

    delete:
      tags:
        - Consoles

  /employees:
    get:
      tags:
        - Employees

    post:
      tags:
        - Employees

  /employees/{employeeId}:
    parameters:
      - $ref: '#/components/parameters/uuidParam'
    get:
      tags:
        - Employees

    patch:
      tags:
        - Employees

  /games:
    get:
      tags:
        - Games

    post:
      tags:
        - Games

  /games/{gameId}:
    parameters:
      - $ref: '#/components/parameters/uuidParam'
    get:
      tags:
        - Games

    patch:
      tags:
        - Games

    delete:
      tags:
        - Games

  /sales:
    get:
      tags:
        - Sales

    post:
      tags:
        - Sales

  /sales/{saleId}:
    parameters:
      - $ref: '#/components/parameters/uuidParam'
    get:
      tags:
        - Sales

    patch:
      tags:
        - Sales

  /returns:
    get:
      tags:
        - Returns

    post:
      tags:
        - Returns

  /returns/{returnId}:
    parameters:
      - $ref: '#/components/parameters/uuidParam'
    get:
      tags:
        - Returns

    patch:
      tags:
        - Returns

  /users:
    post:
      tags:
        - Users

  /users/{userId}:
    parameters:
      - $ref: '#/components/parameters/uuidParam'
    patch:
      tags:
        - Users

    delete:
      tags:
        - Users

  /users/me:
    get:
      tags:
        - Users

    patch:
      tags:
        - Users

  /users/me/orders:
    get:
      tags:
        - Orders

  /users/me/questions:
    get:
      tags:
        - Questions

  /users/me/returns:
    get:
      tags:
        - Returns

  /users/password-reset:
    post:
      tags:
        - Users

components:
  schemas:
    _uuid:
      type: string
      format: uuid
      minLength: 36
      maxLength: 36
      pattern: '^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$'
      example: 1b90aa6b-4720-48d2-ac1d-4229668233e5
    
    _date:
      type: string
      format: date-time
      example: '2021-07-01T12:05:20+00:00'

    _email:
      type: string
      # faltan maxLength y minLength
      format: email
      example: jacob@cloudappi.net
    
    _password:
      type: string
      # faltan maxLength y minLength
      format: password
      example: thisisapassword

    user:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/_uuid'
        name:
          type: string
          example: Jhon
        family_name_1:
          type: string
          example: Doe
        family_name_2:
          type: string
          # faltan maxLength y minLength
          example: Doe
        email:
          $ref: '#/components/schemas/_email'
        password:
          $ref: '#/components/schemas/_password'

    employee:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/_uuid'
        login:
          description: Exclusive login for an employee, given by the administrator
          type: string
          maxLength: 8
          minLength: 8
          example: Y21J7mo4
        password:
          $ref: '#/components/schemas/_password'

    game:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/_uuid'
        name:
          description: Name of the game
          type: string
          example: Candy Crush
        developer:
          description: Developer company of the game
          type: string
          example: Frictional Games
        category:
          description: Category of the game
          type: string
          # faltan maxLength y minLength
          example: FPS
        PEGI:
          description: Pan European Game Information
          type: string
          example: '+18'
        explicitContent: 
          description: Array of advisories for explicit content
          type: array
          items:
            type: string
            # faltan maxLength y minLength
            example: violence
        numberOfPlayers:
          description: How many players can play at the same time
          type: string
          example: '2'
        synopsis:
          description: Short description of the game
          # faltan maxLength y minLength
          type: string
          example: The game follows a nameless knight, as they traverse an ancient, plague-infested kingdom inhabited by various insects, known as Hallownest.
        price:
          description: Price of the game, in euros
          type: number
          format: double
          example: 9.99
        launchDate:
          description: Date of the game's launch, ISO-8601 format
          $ref: '#/components/schemas/_date'
        resupplyDate: # Yo esto lo quitaría
          description: Date of game's resupply, ISO-8601 format
          $ref: '#/components/schemas/_date'

    console:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/_uuid'
        name:
          description: Name of the console
          type: string
          example: Playstation 4
        brand:
          description: Brand of the console
          type: string
          example: Sony Computer Entertainment
        price:
          description: Price of the console, in euros
          type: number
          format: double
          minimum: 0
          example: 499.99
        launchDate:
          description: Date of the console's launch, ISO-8601 format
          $ref: '#/components/schemas/_date'
        resupplyDate:
          description: Date of console's resupply, ISO-8601 format
          $ref: '#/components/schemas/_date'

    question:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/_uuid'
        user:
          description: Author of the question
          $ref: '#/components/schemas/user'
        subject:
          description: Subject of the question
          type: string
          example: Question about the payment methods
        questionBody:
          description: Body of the question
          type: string
          example: Can I purchase using cryptocurrencies?
        state:
          description: State of the question
          enum:
            - answered
            - pending
        isAnswered:
          description: Boolean describing the state of the question
          type: boolean
          example: false
        answeredBy:
          description: Employee who answered the question
          $ref: '#/components/schemas/employee'
        answer:
          description: Body of the answer
          type: string
          example: Sorry, but cryptocurrencies are not allowed in our web store

    order:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/_uuid'
        user:
          description: Owner of the order
          $ref: '#/components/schemas/user'
        state:
          description: State of the order
          enum:
            - purchased
            - pending
            - shipped
            - delivered
            - returned
        orderProducts:
          description: Products included in the order
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/console'
              - $ref: '#/components/schemas/game'
        orderDate:
          description: Date of the order
          $ref: '#/components/schemas/_date'
        deliveryDate:
          description: Delivery date of the order
          $ref: '#/components/schemas/_date'

    return:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/_uuid'
        user:
          description: Claimer of the return
          $ref: '#/components/schemas/user'
        state:
          description: State of the request
          enum:
            - requested
            - made
        returnedProducts:
          description: Products included in the request
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/console'
              - $ref: '#/components/schemas/game'
        reason:
          description: Reason for the return
          type: string
          example: The console I acquire does not work
        returnDate:
          description: Date when the return was made
          $ref: '#/components/schemas/_date'
        dateRequest:
          description: Date when the return was requested
          $ref: '#/components/schemas/_date'

    standard_response_result:
      description: Result model for all responses
      type: object
      properties:
        http_status:
          description: HTTP status of the current response
          type: string
          example: BAD_REQUEST
        code:
          description: HTTP status code of the current response
          type: integer
          example: 400
        description:
          description: Possible description for the current response, usually only for errors
          type: string
          example: An internal error occurred
      required:
        - http_status
        - code

    standard_error_response:
      description: Error response model
      type: object
      properties:
        result:
          $ref: '#/components/schemas/standard_response_result'
        errors:
          type: array
          items:
            type: object
            properties:
              name:
                description: Name of the item causing the error
                type: string
                example: User's name
              value:
                description: Short description for the error
                type: string
                example: You must declare a name while creating a new user
      required:
        - result

    standard_paging:
      description: Required when response is paginated. This object only contains paginations information
      type: object
      properties:
        init:
          description: Page offset
          type: integer
          example: 2
        limit:
          description: Page size
          type: integer
          example: 20
        num_pages:
          description: Total number of pages
          type: integer
          example: 6
        total:
          description: Total number of records
          type: integer
          example: 10
        start:
          description: First registry in the result list
          type: integer
          example: 1
        end:
          description: Last registry in the result list
          type: integer
          example: 256
        _links:
          type: object
          properties:
            _self: 
              description: Current page link
              $ref: '#/components/schemas/standard_link'
            _previous: 
              description: Link to previous page
              $ref: '#/components/schemas/standard_link'
            _next: 
              description: Link to next page
              $ref: '#/components/schemas/standard_link'
            _first: 
              description: Link to first page
              $ref: '#/components/schemas/standard_link'
            _last: 
              description: Link to last page
              $ref: '#/components/schemas/standard_link'
          required:
            - previous
            - next
      required:
        - offset
        - limit
        - total
        - _links

    standard_link:
      description: URL link to page
      type: object
      properties:
        href:
          type: string
          example: https://api.server.com/api/v1/resources)$offset=1&$limit=25

  responses:

    standard_bad_request:
      description: Bad request response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/standard_error_response'

    standard_unauthorized:
      description: Unauthorized response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/standard_error_response'

    standard_forbidden:
      description: Forbidden response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/standard_error_response'

    standard_not_found:
      description: Not found response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/standard_error_response'

    standard_internal_error:
      description: Internal server error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/standard_error_response'

  requestBodies:
    post_password_reset:
      description: Request body for password reset, containing the email associated to the user's account
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email: 
                $ref: '#/components/schemas/_email'
            required:
              - email

    post_user:
      description: Request body with user properties
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/user'
            required:
              - name
              - family_name_1
              - email
              - password

    patch_user:
      description: Request body with user properties to modify
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              isDeleted:
                description: Boolean describing if the user is deleted
                type: boolean
                example: false
                default: false
            required:
              - isDeleted

    patch_user_me:
      description: Request body with user properties to modify
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/user'
            properties:
              isDeleted:
                type: boolean
                example: false
                default: false

    post_employee:
      description: Request body with employee properties
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/employee'
            required:
              - login
              - password

    patch_employee:
      description: Request body with employee properties to modify
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/employee'
            properties:
              isActive:
                description: Boolean describing the active state of the employee
                type: boolean
                example: true
                default: true

    post_game:
      description: Request body with game properties
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/game'
            required:
              - name
              - developer
              - category
              - PEGI
              - explicitContent
              - numberOfPlayers
              - synopsis
              - price
              - launchDate

    patch_game:
      description: Request body with game properties to modify
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/game'

    post_console:
      description: Request body with console properties
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/console'
            required:
              - name
              - brand
              - price
              - launchDate

    patch_console:
      description: Request body with console properties to modify
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/console'

    post_question:
      description: Request body with question properties
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                description: Author of the question
                $ref: '#/components/schemas/user'
              subject:
                description: Subject of the question
                type: string
                example: Question about the payment methods
              questionBody:
                description: Body of the question
                type: string
                example: Can I purchase using cryptocurrencies?
            required:
              - users
              - subject
              - questionBody

    patch_question:
      description: Request body with question properties to modify
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/question'

    post_order:
      description: Request body with order properties
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                description: Owner of the order
                $ref: '#/components/schemas/user'
              orderProducts:
                description: Products included in the order
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/console'
                    - $ref: '#/components/schemas/game'
            required:
              - user
              - orderProducts

    patch_order:
      description: Request body with order properties to modify
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/order'

    post_return:
      description: Request body with return properties
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                description: Claimer of the return
                $ref: '#/components/schemas/user'
              returnedProducts:
                description: Products included in the request
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/console'
                    - $ref: '#/components/schemas/game'
              reason:
                description: Reason for the return
                type: string
                example: The console I acquire does not work

    patch_return:
      description: Request body with return properties to modify
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              state:
                description: State of the request
                enum:
                  - requested
                  - made

  parameters:
    uuidParam:
      name: uuid
      in: path
      description: Identifier of a resource, in UUID v4 format
      required: true
      schema:
        $ref: '#/components/schemas/_uuid'
    # Query Params
    excludeParam:
      in: query
      name: $exclude
      required: false
      description: |
        Array of resource attributes excluded in result.
      schema:
        type: string

    selectParam:
      in: query
      name: $select
      required: false
      description: | 
        Array of the resource attributes that are included in result.
      schema:
        type: string

    limitParam:
      in: query
      name: $limit
      required: true
      description: | 
        Maximum number of records per page.
      schema:
        type: integer
        default: 25
        minimum: 0
        maximum: 25

    offsetParam:
      in: query
      name: $offset
      required: true
      description: | 
        Page number. (First page is 0).
      schema:
        type: integer
        default: 0
        minimum: 0
    
    expandParam:
      in: query
      name: $expand
      required: false
      description: |  
        Array of subattributes to be expanded.
      schema: 
        type: string